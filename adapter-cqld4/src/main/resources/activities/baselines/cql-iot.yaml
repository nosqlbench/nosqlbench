description: |
  Time-series data model and access patterns. (use cql-timeseries instead)
  This is the same a cql-timeseries, which is the preferred name as it is
  more canonical. This workload is retained for historic reasons.

scenarios:
  default:
    schema: run driver=cql tags==block:schema threads==1 cycles==UNDEF
    rampup: run driver=cql tags==block:rampup cycles===TEMPLATE(rampup-cycles,10000000) threads=auto
    main: run driver=cql tags==block:"main.*" cycles===TEMPLATE(main-cycles,10000000) threads=auto
  astra:
    schema: run driver=cql tags==block:schema-astra threads==1 cycles==UNDEF
    rampup: run driver=cql tags==block:rampup cycles===TEMPLATE(rampup-cycles,10000000) threads=auto
    main: run driver=cql tags==block:"main.*" cycles===TEMPLATE(main-cycles,10000000) threads=auto

params:
  instrument: TEMPLATE(instrument,false)

bindings:
  machine_id: Mod(<<sources:10000>>); ToHashedUUID() -> java.util.UUID
  sensor_name: HashedLineToString('data/variable_words.txt')
  time: Mul(<<timespeed:100>>L); Div(<<sources:10000>>L); ToJavaInstant();
  cell_timestamp: Mul(<<timespeed:100>>L); Div(<<sources:10000>>L); Mul(1000L)
  sensor_value: Normal(0.0,5.0); Add(100.0) -> double
  station_id: Div(<<sources:10000>>);Mod(<<stations:100>>); ToHashedUUID() -> java.util.UUID
  data: HashedFileExtractToString('data/lorem_ipsum_full.txt',800,1200)
blocks:
  schema:
    params:
      prepared: false
    ops:
      create-keyspace: |
        create keyspace if not exists <<keyspace:baselines>>
        WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '<<rf:1>>'}
        AND durable_writes = true;
      create-table: |
        create table if not exists <<keyspace:baselines>>.<<table:iot>> (
        machine_id UUID,     // source machine
        sensor_name text,    // sensor name
        time timestamp,      // timestamp of collection
        sensor_value double, //
        station_id UUID,     // source location
        data text,
        PRIMARY KEY ((machine_id, sensor_name), time)
        ) WITH CLUSTERING ORDER BY (time DESC)
         AND compression = { 'sstable_compression' : '<<compression:LZ4Compressor>>' }
         AND compaction = {
         'class': 'TimeWindowCompactionStrategy',
         'compaction_window_size': <<expiry_minutes:60>>,
         'compaction_window_unit': 'MINUTES'
        };
      truncate-table: |
        truncate table <<keyspace:baselines>>.<<table:iot>>;
  schema-astra:
    params:
      prepared: false
    ops:
      create-table-astra: |
        create table if not exists <<keyspace:baselines>>.<<table:iot>> (
        machine_id UUID,     // source machine
        sensor_name text,    // sensor name
        time timestamp,      // timestamp of collection
        sensor_value double, //
        station_id UUID,     // source location
        data text,
        PRIMARY KEY ((machine_id, sensor_name), time)
        ) WITH CLUSTERING ORDER BY (time DESC);
  rampup:
    params:
      cl: <<write_cl:LOCAL_QUORUM>>
      instrument: TEMPLATE(instrument-writes,TEMPLATE(instrument,false))
      idempotent: true
    ops:
      insert-rampup: |
        insert into  <<keyspace:baselines>>.<<table:iot>>
        (machine_id, sensor_name, time, sensor_value, station_id, data)
        values ({machine_id}, {sensor_name}, {time}, {sensor_value}, {station_id}, {data})
        using timestamp {cell_timestamp}
  verify:
    params:
      ratio: 1
      cl: <<read_cl:LOCAL_QUORUM>>
      verify-fields: "*, -cell_timestamp"
      instrument: TEMPLATE(instrument-reads,TEMPLATE(instrument,false))
    ops:
      select-verify: |
        select * from <<keyspace:baselines>>.<<table:iot>>
        where machine_id={machine_id} and sensor_name={sensor_name} and time={time};
  main-read:
    params:
      ratio: <<read_ratio:1>>
      cl: <<read_cl:LOCAL_QUORUM>>
      instrument: TEMPLATE(instrument-reads,TEMPLATE(instrument,false))
    ops:
      select-read: |
        select * from <<keyspace:baselines>>.<<table:iot>>
        where machine_id={machine_id} and sensor_name={sensor_name}
        limit <<limit:10>>
  main-write:
    params:
      ratio: <<write_ratio:9>>
      cl: <<write_cl:LOCAL_QUORUM>>
      idempotent: true
      instrument: TEMPLATE(instrument-writes,TEMPLATE(instrument,false))
    ops:
      insert-main: |
        insert into <<keyspace:baselines>>.<<table:iot>>
        (machine_id, sensor_name, time, sensor_value, station_id, data)
        values ({machine_id}, {sensor_name}, {time}, {sensor_value}, {station_id}, {data})
        using timestamp {cell_timestamp}

