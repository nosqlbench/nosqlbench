# next step to do on this is to make the grammar support recursive type defs, because even after fixups,
# some dsefs defs like  inode_ids set<frozen<tuple<timeuuid, timestamp>>>, are not supported yet
# text_transformers:
#  - class: CGRegexReplacer
#    config:
#      prefix: "r__"
#      suffix: ""
#      outfile: _replaced.cql
#      replacers:
#        - - '^(\s*?)\b(options|role|roles|permissions|permission|date|key|timestamp|type|keys)\b(\s+[a-zA-Z][a-zA-Z<>,_ -]*?,?)$'
#          - '$1"$2"$3'
#        - - '^(.*?PRIMARY KEY.*?)\b(options|role|roles|permissions|permission|date|key|timestamp|type|keys)\b(.*?)$'
#          - '$1"$2"$3'
#        - - '^(.*?CLUSTERING ORDER BY.+?)\b(options|role|roles|permissions|permission|date|key|timestamp|type|keys)\b(.*?)$'
#          - '$1"$2"$3'
#        - - '^(\s*?CREATE TABLE.+?)\b(options|role|roles|permissions|permission|date|key|timestamp|type|keys)\b(.*?)$'
#          - '$1"$2"$3'
#
model_transformers:

 # filters in or out keyspaces
  - name: keyspace_filter
    class: CGKeyspaceFilter
    config:
      - exclude: system
      - exclude: system_.*
      - exclude: dse_.*
      - exclude: dsefs_.*
      - exclude: cfs_.*
      - exclude: cfs
      - exclude: Hive.*
      - exclude: spark_system
      - include: .*

  # replaces the replication settings with the provided values here,
  # specified as a text block to be put inside the curly braces
  - name: replication
    class: CGReplicationSettingInjector
    config:
      replication_fields: |
        'class': 'SimpleStrategy',
        'replication_factor': 'TEMPLATE(rf:1)'

# This is more appropriately handled in the scenario selections, which now
# contain all or partial schema blocks
#  # Removes Keyspace DDL statements
#  - class: CGKeySpaceDDLRemover

  # Replaces UDTs with blobs until we have full UDT generation capability
  - name: udtskipper
    class: CGUdtReplacer

  # Reads a configured file path containing nodetool histogram stats output
  # If no histostats file is provided, then this is skipped, including
  # any downstream usage of this data
  - name: tablestats
    class: CGGenStatsInjector
    config:
      path: tablestats
      onmissing: skip

  # Uses nodetool histogram stats to weight reads and writes over all ops
  # This depends on data from the stats injector above. If not provided,
  # this skips modifying ratios gracefully and they re all just set to 1
  # as usual.
  - name: ratios
    class: CGRatioCalculator

#   # if this is set, and the fractional rate of operations against a table
#   # counting reads and writes is less than the percent threshold, then
#   # the table will be excluded from all op template generation.
#   - class: UnusedTableRemover
#     config:
#       # this is as a fractional number, so 0.1 is the same as 10%
#       minimum_threshold: 0.001

  # replaces names of keyspaces, tables, and columns with generated values
  - name: obfuscator
    class: CGNameObfuscator
    config:
      namer: Combinations('0-9;0-9;0-9;0-9;0-9');
#       mapfile: mapfile.json

  # format the table names based on their total share of all ops
  # The format is a String.format specifier.
  #   Arg 1 "%1$" is the original name.
  #   Arg 2 "%2$" is a double value.
  # The resolution is specified by the decimal field width.
  - name: ratio_suffix
    class: CGRatioSuffixer
    config:
      format: "%1$s_%2$03d"
# This controls how the elements in the schema are named in the yaml.
# This affects block names, op template names and so on, and also how
# op templates will be named in all logs and  metric views.

naming_template: "[OPTYPE-][TYPE-][KEYSPACE-][TABLE-][NAME]"

# for more distinction in metric names if needed:
#naming_template: "[BLOCKNAME-][OPTYPE-][KEYSPACE-][TYPE-][NAME]"

# how many partitions the primary key is limited to, compared to the value
# found in the node tool stats. If you have the actual value from complete
# statistics, this can be 1.0, but it is generally not accurate to take
# stats from one node. This allows for sizing up those estimates according
# to anecdotal information. The general rule of thumb on this is to take
# the number of nodes in your cluster and divide by the replication factor.

partition_multiplier: 30.0

# Timeouts for each operation category. These are specified in terms of seconds.
# fractional values are allowed. If not specified, all operations will default to
# using 10 seconds. Internally, these are configured as milliseconds. If multiple
# timeouts are found in a block, then timeouts will remain specific to each op
# template. If they are all the same, then they are pulled up to a single param
# at the root of the block.
timeouts:
  create: 60.0
  truncate: 900.0
  drop: 900.0
  scan: 30.0
  select: 10.0
  insert: 10.0
  update: 10.0
  delete: 10.0


blockplan:
  # not needed when tags=block:"schema.*"
  # schema: schema-keyspaces, schema-tables, schema-types
  schema-keyspaces: schema-keyspaces
  schema-tables: schema-tables
  schema-types: schema-types
  truncate-tables: truncate-tables
  drop-types: drop-types
  drop-tables: drop-tables
  drop-keyspaces: drop-keyspaces
  # not needed when tags=block:'drop.*'
  # drop: drop-types, drop-tables, drop-keyspaces
  rampup: insert-seq
  main-insert: insert-seq
  main-select: select-seq
  main-scan: scan-10-seq
  main-update: update-seq
  # not needed when tags=block:'main.*'
  # main: insert, select, scan-10, update




