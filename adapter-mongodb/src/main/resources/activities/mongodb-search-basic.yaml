
description: |
  This workload emulates basic search operations for the mongoDB.
  During the rampup phase, it generates documents, writes them to a collection, and then warms up the search paths.
  During the main phase it performs various basic search filters and times their execution.
  It's a counterpart of the Stargate's Documents API Basic Search workflow.

scenarios:
  schema:                run driver=mongodb tags==block:"schema.*" threads==1 cycles==UNDEF
  rampup-write:          run driver=mongodb tags==block:"rampup-write.*" cycles===TEMPLATE(docscount,10000000) docpadding=TEMPLATE(docpadding,0) match-ratio=TEMPLATE(match-ratio,0.01) threads=auto errors=timer,warn
  rampup-read:           run driver=mongodb tags==block:"rampup-read.*" cycles===TEMPLATE(rampup-cycles, 10000000) field-projection=TEMPLATE(fields,null) threads=<<threads:auto>> errors=timer,warn
  main:                  run driver=mongodb tags==block:main cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) field-projection=TEMPLATE(fields,null) threads=<<threads:auto>> errors=timer,warn
  main-eq:               run driver=mongodb tags==block:main-eq,filter:eq cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) field-projection=TEMPLATE(fields,null) threads=<<threads:auto>> errors=timer,warn
  main-lt:               run driver=mongodb tags==block:main-lt,filter:lt cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) field-projection=TEMPLATE(fields,null) threads=<<threads:auto>> errors=timer,warn
  main-and:              run driver=mongodb tags==block:main-and,filter:and cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) field-projection=TEMPLATE(fields,null) threads=<<threads:auto>> errors=timer,warn
  main-or:               run driver=mongodb tags==block:main-or,filter:or cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) field-projection=TEMPLATE(fields,null) threads=<<threads:auto>> errors=timer,warn
  main-or-single-match:  run driver=mongodb tags==block:main-or-single-match,filter:or-single-match cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) field-projection=TEMPLATE(fields,null) threads=<<threads:auto>> errors=timer,warn

bindings:
  seq_key: Mod(<<docscount:10000000>>); ToString() -> String
  random_key: Uniform(0,<<docscount:10000000>>); ToString() -> String

  user_id: ToHashedUUID(); ToString() -> String
  created_on: Uniform(1262304000,1577836800) -> long
  full_name: FullNames()
  married: ModuloToBoolean()
  city: Cities()
  country_code: CountryCodes()
  lat: Uniform(-180d, 180d)
  lng: Hash() -> long; Uniform(-180d, 180d)
  friend_id: Add(-1); ToHashedUUID(); ToString() -> String

  match1: Identity(); CoinFunc(<<match-ratio>>, FixedValue(0), FixedValue(1000))
  match2: Identity(); CoinFunc(<<match-ratio>>, FixedValue("true"), FixedValue("false"))
  additional_fields: ListSizedStepped(<<docpadding:0>>,Template("\"{}\":{}",Identity(),Identity())); ToString(); ReplaceAll('\[\"', ',\"'); ReplaceAll('\[', ''); ReplaceAll('\]', '') -> String

blocks:
  schema:
    ops:
      dummy-insert: |
        {
          insert: "<<collection:search_basic>>",
          documents: [ { _id: "dummyyyy" } ]
        }

      drop-collection: |
        {
          drop: "<<collection:search_basic>>"
        }       

      create-collection: |
        {
          create: "<<collection:search_basic>>"
        }      

      create-indexes: |
        {
          createIndexes: "<<collection:search_basic>>",
          indexes: [
            {
              key: { user_id: 1 },
              name: "user_id_idx",
              unique: true
            },
            {
              key: { created_on: 1 },
              name: "created_on_idx"
            },
            {
              key: { city: 1 },
              name: "city_idx"
            }
          ]
        }

    rampup-write:
      ops:
        write-document:
          {
            insert: "<<collection:search_basic>>",
            writeConcern: { w: "majority" },
            documents: [
              {
                "_id":          "{seq_key}",
                "user_id":      "{user_id}",
                "created_on":   {created_on},
                "full_name":    "{full_name}",
                "married":      {married},
                "address": {
                  "primary": {
                      "city":   "{city}",
                      "cc":     "{country_code}"
                  },
                  "secondary":  {}
                },
                "coordinates": [
                                {lat},
                                {lng}
                ],
                "children":     [],
                "friends": [
                                "{friend_id}"
                ],
                "debt":         null,
                "match1":       {match1},
                "match2":       "{match2}",
                "match3":       {match2},
                {
                  additional_fields
                }
              }
            ]
          }
    rampup-read:
      params:
        filter: eq
      ops:
        read-document: |
          {
            find: "<<collection:search_basic>>",
            filter: { match1: 0 }
          }, <<field-projection:null>>

  main-eq:
    params:
      filter: eq
    ops:
      read-document: |
        {
          find: "<<collection:search_basic>>",
          filter: { match3: true }
        }, <<field-projection:null>>        

  main-lt:
    params:
      filter: lt
    ops:
      read-document: |
        {
          find: "<<collection:search_basic>>",
          filter: { match1: {$lt: 1}}
        }, <<field-projection:null>>        

  main-and:
    params:
      filter: and
    ops:
      read-document: |
        {
          find: "<<collection:search_basic>>",
          filter: { match1: {$lt: 1}, match2: "true"}
        }, <<field-projection:null>>        

  main-or:
    params:
      filter: or
    ops:
      read-document: |
        {
          find: "<<collection:search_basic>>",
          filter: { $or: [ {match1: {$lt: 1}}, {match3: true}]}
        }, <<field-projection:null>>        

  main-or-single-match:
    params:
      filter: or-single-match
    ops:
      read-document: |
        {
          find: "<<collection:search_basic>>",
          filter: { $or: [ {match1: {$lt: 1}}, {match2: "notamatch"}]}
        }, <<field-projection:null>>