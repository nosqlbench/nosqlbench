
description: |
  This workload emulates CRUD operations for the mongoDB.
  It requires a data set file, where each line is a single JSON document to be used for writes and updates.
  It's a counterpart of the Stargate's Documents API CRUD Dataset workflow.

scenarios:
  default:
    schema:   run driver=mongodb tags==block:"schema.*", threads==1 cycles==UNDEF
    write:    run driver=mongodb tags==block:"write.*", cycles===TEMPLATE(write-cycles,TEMPLATE(docscount,10000000)) threads=auto errors=timer,warn
    read:     run driver=mongodb tags==block:"read.*", cycles===TEMPLATE(read-cycles,TEMPLATE(docscount,10000000)) threads=auto errors=timer,warn
    update:   run driver=mongodb tags==block:"update.*", cycles===TEMPLATE(update-cycles,TEMPLATE(docscount,10000000)) threads=auto errors=timer,warn
    delete:   run driver=mongodb tags==block:"delete.*", cycles===TEMPLATE(delete-cycles,TEMPLATE(docscount,10000000)) threads=auto errors=timer,warn

bindings:
  seq_key: Mod(<<docscount:10000000>>); ToString() -> String
  random_key: Uniform(0,<<docscount:10000000>>); ToString() -> String
  document_json_without_id: ModuloLineToString('<<dataset_file>>'); ReplaceRegex('^\{', '')

blocks:
  schema:
    ops:
      dummy-insert: >2
        {
          insert: "<<collection:crud_dataset>>",
          documents: [ { _id: "dummyyyy" } ]
        }

      drop-collection: >2
        {
          drop: "<<collection:crud_dataset>>"
        }      

      create-collection: >2
        {
          create: "<<collection:crud_dataset>>"
        }                 

      create-indexes: >2
        {
          createIndexes: "<<collection:crud_dataset>>",
          indexes: <<indexes:[ { key: { dummy : 1 }, name: "dummy_idx", sparse: true } ]>>
        }        

  write:
    ops:
      write-docs: >2
        {
          insert: "<<collection:crud_dataset>>",
          writeConcern: { w: "majority" },
          documents: [ { "_id": "{seq_key}", {document_json_without_id} } ]
        }

  read:
    ops:
      read-docs: >2
        {
          find: "<<collection:crud_dataset>>",
          filter: { _id: "{random_key}" }
        }        

  update:
    ops:
      update-docs: >2
        {
          update: "<<collection:crud_dataset>>",
          writeConcern: { w: "majority" },
          updates: [
            {
              q: { _id: "{random_key}" },
              u: { "_id": "{random_key}", {document_json_without_id} }
            }
          ]
        }

  delete:
    ops:
      delete-docs: >2
        {
          delete: "<<collection:crud_dataset>>",
          deletes: [
            {
              q: { _id: "{seq_key}" },
              limit: 1
            }
          ]
        }