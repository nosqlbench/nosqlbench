min_version: "5.17.3"

description: |
  This workload emulates a key-value data model and access patterns.
  This should be identical to the cql variant except for:
  - There is no instrumentation with the http driver.
  - There is no async mode with the http driver.
  Note that graphql_port should reflect the port where GraphQL API is exposed (defaults to 8080).

scenarios:
  default:
    schema: run driver=http tags==block:"schema.*" threads==1 cycles==UNDEF
    rampup: run driver=http tags==block:"rampup.*" cycles===TEMPLATE(rampup-cycles,10) threads=auto
    main: run driver=http tags==block:"main.*" cycles===TEMPLATE(main-cycles,10) threads=auto

bindings:
  weighted_hosts: WeightedStrings('TEMPLATE(graphql_host,stargate)')
  request_id: ToHashedUUID(); ToString();
  token: Discard(); Token('TEMPLATE(auth_token,)','TEMPLATE(auth_uri,http://localhost:8081/v1/auth)', 'TEMPLATE(auth_uid,cassandra)', 'TEMPLATE(auth_pswd,cassandra)');

  seq_key: Mod(TEMPLATE(keycount,10000000)); ToString() -> String
  seq_value: Hash(); Mod(TEMPLATE(valuecount,1000000000)); ToString() -> String
  rw_key: TEMPLATE(keydist,Uniform(0,10000000)->int); ToString() -> String
  rw_value: Hash(); TEMPLATE(valdist,Uniform(0,1000000000)->int); ToString() -> String

blocks:
  schema:
    ops:
      create_keyspace:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql-schema
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {"query":"mutation {\n  createKeyspace(name:\"TEMPLATE(keyspace,gqlcf_keyvalue)\", replicas: TEMPLATE(rf,1), ifNotExists: true)\n}"}

      create_table:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql-schema
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: |
          {"query":"mutation {\n  createTable(\n    keyspaceName: \"TEMPLATE(keyspace,gqlcf_keyvalue)\"\n    tableName: \"TEMPLATE(table,keyvalue)\"\n    partitionKeys: [{ name: \"key\", type: { basic: TEXT } }]\n    values: [{ name: \"value\", type: { basic: TEXT } }]\n    ifNotExists: true\n  )\n}"}

  rampup:
    ops:
      rampup_insert:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql/TEMPLATE(keyspace,gqlcf_keyvalue)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: |
          {"query":"mutation {\n  insertTEMPLATE(table,keyvalue)( value: {key: \"{seq_key}\", value: \"{seq_value}\",}) {value {key, value}}}"}

  main_read:
    params:
      ratio: TEMPLATE(read_ratio,5)
    ops:
      main_select:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql/TEMPLATE(keyspace,gqlcf_keyvalue)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: |
          {"query":"{TEMPLATE(table,keyvalue)(value: {key: \"{rw_key}\"}) {values {key, value}}}"}

  main_write:
    params:
      ratio: TEMPLATE(write_ratio,5)
    ops:
      main_write:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql/TEMPLATE(keyspace,gqlcf_keyvalue)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: |
          {"query":"mutation {\n  insertTEMPLATE(table,keyvalue)( value: {key: \"{rw_key}\", value: \"{rw_value}\",}) {value {key, value}}}"}
