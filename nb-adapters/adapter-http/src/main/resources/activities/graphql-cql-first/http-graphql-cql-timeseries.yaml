min_version: "5.17.3"

description: |
  This workload emulates a time-series data model and access patterns.
  This should be identical to the cql variant except for:
  - We can't specify the write timestamp to make the write idempotent like we can with cql.
  - The `time` binding has to have a StringDateWrapper to get the exact format that the graphql API needs; See https://github.com/stargate/stargate/issues/532.
  - We need to URLEncode the `data` binding because newlines can't be sent in graphql calls.
  - Schema creation is cql of the lack of being able to define compaction strategy in the graphql API.
  - There is no instrumentation with the http driver.
  - There is no async mode with the http driver.
  Note that graphql_port should reflect the port where GraphQL API is exposed (defaults to 8080).

scenarios:
  default:
    schema: run driver=http tags==block:schema threads==1 cycles==UNDEF
    rampup: run driver=http tags==block:rampup cycles===TEMPLATE(rampup-cycles,10) threads=auto
    main_read: run driver=http tags==block:"main-read.*" cycles===TEMPLATE(main-cycles,10) threads=auto
    main_write: run driver=http tags==block:"main-write.*" cycles===TEMPLATE(main-cycles,10) threads=auto


bindings:
  weighted_hosts: WeightedStrings('TEMPLATE(graphql_host,stargate)')
  request_id: ToHashedUUID(); ToString();
  token: Discard(); Token('TEMPLATE(auth_token,)','TEMPLATE(auth_uri,http://localhost:8081/v1/auth)', 'TEMPLATE(auth_uid,cassandra)', 'TEMPLATE(auth_pswd,cassandra)');

  machine_id: Mod(TEMPLATE(sources,10000)); ToHashedUUID() -> java.util.UUID
  sensor_name: HashedLineToString('data/variable_words.txt')
  time: Mul(TEMPLATE(timespeed,100)L); Div(TEMPLATE(sources,10000)L); StringDateWrapper("yyyy-MM-dd'T'hh:mm:ss'Z");
  sensor_value: Normal(0.0,5.0); Add(100.0) -> double
  station_id: Div(TEMPLATE(sources,10000));Mod(TEMPLATE(stations,100)); ToHashedUUID() -> java.util.UUID
  data: HashedFileExtractToString('data/lorem_ipsum_full.txt',800,1200); URLEncode();

blocks:
  schema:
    params:
      prepared: false
    ops:
      create_keyspace:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql-schema
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {"query":"mutation {\n  createKeyspace(name:\"TEMPLATE(keyspace,gqlcf_iot)\", replicas: TEMPLATE(rf,1), ifNotExists: true)\n}"}

      create_table:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql-schema
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {"query":"mutation {\n  createTable(\n    keyspaceName: \"TEMPLATE(keyspace,gqlcf_iot)\"\n    tableName: \"TEMPLATE(table,iot)\"\n    partitionKeys: [{ name: \"machine_id\", type: { basic: UUID } }, { name: \"sensor_name\", type: { basic: TEXT } }]\n    clusteringKeys: [{ name: \"time\", type: { basic: TIMESTAMP }, order: \"DESC\" }]\n    values: [{ name: \"sensor_value\", type: { basic: FLOAT } }, { name: \"station_id\", type: { basic: UUID } }, { name: \"data\", type: { basic: TEXT } }]\n    ifNotExists: true\n  )\n}\n"}

  rampup:
    ops:
      rampup_insert:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql/TEMPLATE(keyspace,gqlcf_iot)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {"query":"mutation insertReading {\n  reading: insertTEMPLATE(table,iot)( value: {machine_id: \"{machine_id}\", sensor_name: \"{sensor_name}\", time: \"{time}\", data: \"{data}\", sensor_value: {sensor_value}, station_id: \"{station_id}\"}) {value {machine_id, sensor_name, time, data, sensor_value, station_id}}}"}

  main_read:
    params:
      ratio: TEMPLATE(read_ratio,1)
    ops:
      main_select:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql/TEMPLATE(keyspace,gqlcf_iot)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {"query":"query readings {TEMPLATE(table,iot)(value: {machine_id: \"{machine_id}\",sensor_name: \"{sensor_name}\"}, options: { pageSize: TEMPLATE(limit,10) }) {values {machine_id, sensor_name, time, data, sensor_value, station_id}}}"}

  main_write:
    params:
      ratio: TEMPLATE(write_ratio,9)
    ops:
      main_write:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql/TEMPLATE(keyspace,gqlcf_iot)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {"query":"mutation insertReading {\n  reading: insertTEMPLATE(table,iot)( value: {machine_id: \"{machine_id}\", sensor_name: \"{sensor_name}\", time: \"{time}\", data: \"{data}\", sensor_value: {sensor_value}, station_id: \"{station_id}\"}) {value {machine_id, sensor_name, time, data, sensor_value, station_id}}}"}
