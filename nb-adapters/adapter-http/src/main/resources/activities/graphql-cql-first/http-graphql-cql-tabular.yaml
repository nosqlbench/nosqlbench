min_version: "5.17.3"

description: |
  This workload emulates a tabular workload with partitions, clusters, and data fields.
  This should be identical to the cql variant except for:
  - We need to URLEncode the `data` and `data_write` bindings because newlines can't be sent in REST calls.
  - There is no instrumentation with the http driver.
  - There is no async mode with the http driver.
  Note that graphql_port should reflect the port where GraphQL API is exposed (defaults to 8080).

scenarios:
  default:
    schema: run driver=http tags==block:"schema.*" threads==1 cycles==UNDEF
    rampup_insert: run driver=http tags==block:"rampup-insert.*" cycles===TEMPLATE(rampup-cycles,12) threads=auto
    main_read: run driver=http tags==block:"main-read.*" cycles===TEMPLATE(main-cycles,12) threads=auto
    main_write: run driver=http tags==block:"main-write.*" cycles===TEMPLATE(main-cycles,12) threads=auto

bindings:
  weighted_hosts: WeightedStrings('TEMPLATE(graphql_host,stargate)')
  request_id: ToHashedUUID(); ToString();
  token: Discard(); Token('TEMPLATE(auth_token,)','TEMPLATE(auth_uri,http://localhost:8081/v1/auth)', 'TEMPLATE(auth_uid,cassandra)', 'TEMPLATE(auth_pswd,cassandra)');

  part_layout: Div(TEMPLATE(partsize,1000000)); ToString() -> String
  clust_layout: Mod(TEMPLATE(partsize,1000000)); ToString() -> String
  data: HashedFileExtractToString('data/lorem_ipsum_full.txt',50,150); URLEncode();

  limit: Uniform(1,10) -> int
  part_read: Uniform(0,TEMPLATE(partcount,100))->int; ToString() -> String
  clust_read: Add(1); Uniform(0,TEMPLATE(partsize,1000000))->int; ToString() -> String

  part_write: Hash(); Uniform(0,TEMPLATE(partcount,100))->int; ToString() -> String
  clust_write: Hash(); Add(1); Uniform(0,TEMPLATE(partsize,1000000))->int; ToString() -> String
  data_write: Hash(); HashedFileExtractToString('data/lorem_ipsum_full.txt',50,150); URLEncode();

blocks:
  schema:
    ops:
      create_keyspace:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql-schema
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {"query":"mutation {\n  createKeyspace(name:\"TEMPLATE(keyspace,gqlcf_tabular)\", replicas: TEMPLATE(rf,1), ifNotExists: true)\n}"}

      create_table:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql-schema
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {"query":"mutation {\n  createTable(\n    keyspaceName: \"TEMPLATE(keyspace,gqlcf_tabular)\"\n    tableName: \"TEMPLATE(table,tabular)\"\n    partitionKeys: [{ name: \"part\", type: { basic: TEXT } }]\n    clusteringKeys: [{ name: \"clust\", type: { basic: TEXT } }]\n    values: [{ name: \"data\", type: { basic: TEXT } }]\n    ifNotExists: true\n  )\n}\n"}

  rampup_insert:
    ops:
      action:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql/TEMPLATE(keyspace,gqlcf_tabular)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {"query":"mutation {\n  insertTEMPLATE(table,tabular)( value: {part: \"{part_layout}\", clust: \"{clust_layout}\", data: \"{data}\"}) {value {part, clust, data}}}"}

  main_read:
    params:
      ratio: 5
    ops:
      action:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql/TEMPLATE(keyspace,gqlcf_tabular)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {"query":"{TEMPLATE(table,tabular)(value: {part: \"{part_read}\"}, options: { pageSize: TEMPLATE(limit,10) }) {values {part, clust, data}}}"}


  main_write:
    params:
      ratio: 5
    ops:
      action:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(graphql_port,8080)TEMPLATE(path_prefix,)/graphql/TEMPLATE(keyspace,gqlcf_tabular)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {"query":"mutation {\n  insertTEMPLATE(table,tabular)( value: {part: \"{part_write}\", clust: \"{clust_write}\", data: \"{data_write}\"}) {value {part, clust, data}}}"}
