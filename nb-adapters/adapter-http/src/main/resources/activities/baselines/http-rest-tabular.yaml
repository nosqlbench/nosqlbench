min_version: "5.17.3"

description: |
  This workload emulates a tabular workload with partitions, clusters, and data fields.
  This should be identical to the cql variant except for:
  - We need to URLEncode the `data` and `data_write` bindings because newlines can't be sent in REST calls.
  - There is no instrumentation with the http driver.
  - There is no async mode with the http driver.
  - Refer to 'http-rest.md' for more information.

scenarios:
  default:
    schema: run driver=http tags==block:"schema.*" threads==1 cycles==UNDEF
    rampup: run driver=http tags==block:"rampup.*" cycles===TEMPLATE(rampup-cycles,10) threads=auto
    main: run driver=http tags==block:"main.*" cycles===TEMPLATE(main-cycles,10) threads=auto

bindings:
  weighted_hosts: WeightedStrings('TEMPLATE(stargate_host,stargate)')
  request_id: ToHashedUUID(); ToString();
  token: Discard(); Token('TEMPLATE(auth_token,)','TEMPLATE(auth_uri,http://localhost:8081/v1/auth)', 'TEMPLATE(auth_uid,cassandra)', 'TEMPLATE(auth_pswd,cassandra)');

  # for ramp-up and verify
  part_layout: Div(TEMPLATE(partsize,1000000)); ToString() -> String
  clust_layout: Mod(TEMPLATE(partsize,1000000)); ToString() -> String
  data: HashedFileExtractToString('data/lorem_ipsum_full.txt',50,150); URLEncode();

  # for read
  limit: Uniform(1,10) -> int
  part_read: Uniform(0,TEMPLATE(partcount,100))->int; ToString() -> String
  clust_read: Add(1); Uniform(0,TEMPLATE(partsize,1000000))->int; ToString() -> String

  # for write
  part_write: Hash(); Uniform(0,TEMPLATE(partcount,100))->int; ToString() -> String
  clust_write: Hash(); Add(1); Uniform(0,TEMPLATE(partsize,1000000))->int; ToString() -> String
  data_write: Hash(); HashedFileExtractToString('data/lorem_ipsum_full.txt',50,150); URLEncode();

blocks:
  schema:
    ops:
      create_keyspace:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/schemas/keyspaces
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {
            "name": "TEMPLATE(keyspace,baselines)",
            "replicas": TEMPLATE(rf,1)
          }

      drop-table:
        method: DELETE
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/schemas/keyspaces/TEMPLATE(keyspace,baselines)/tables/TEMPLATE(table,tabular)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-status: "[2-4][0-9][0-9]"

      create_table:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/schemas/keyspaces/TEMPLATE(keyspace,baselines)/tables
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {
            "name": "TEMPLATE(table,tabular)",
            "columnDefinitions": [
              {
                "name": "part",
                "typeDefinition": "text"
              },
              {
                "name": "clust",
                "typeDefinition": "text"
              },
              {
                "name": "data",
                "typeDefinition": "text"
              }
            ],
            "primaryKey": {
              "partitionKey": [
                  "part"
              ],
              "clusteringKey": [
                  "clust"
              ]
            },
            "ifNotExists": true
          }

  rampup:
    ops:
      rampup_insert:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/keyspaces/TEMPLATE(keyspace,baselines)/TEMPLATE(table,tabular)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {
            "part": "{part_layout}",
            "clust": "{clust_layout}",
            "data": "{data}"
          }

  main_read:
    params:
      ratio: 5
    ops:
      main_select:
        method: GET
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/keyspaces/TEMPLATE(keyspace,baselines)/TEMPLATE(table,tabular)/{part_read}&page-size={limit}
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"

  main_write:
    params:
      ratio: 5
    ops:
      main_write:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/keyspaces/TEMPLATE(keyspace,baselines)/TEMPLATE(table,tabular)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {
            "part": "{part_write}",
            "clust": "{clust_write}",
            "data": "{data_write}"
          }
