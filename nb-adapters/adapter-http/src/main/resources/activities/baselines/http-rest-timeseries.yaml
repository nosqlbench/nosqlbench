min_version: "5.17.3"

description: >2
  NOTE: THIS VERSION IS NOT FUNCTIONING FULLY AND HAS AN OPEN TICKET TO INVESTIGATE:
  See here: https://github.com/nosqlbench/nosqlbench/issues/1148

  This workload emulates a time-series data model and access patterns.
  This should be identical to the cql variant except for:
  - We can't specify the write timestamp to make the write idempotent like we can with cql.
  - The `time` binding has to have a StringDateWrapper to get the exact format that the REST API needs; See https://github.com/stargate/stargate/issues/532.
  - We need to URLEncode the `data` binding because newlines can't be sent in REST calls.
  - Schema creation is cql of the lack of being able to define compaction strategy in the REST API.
  - There is no instrumentation with the http driver.
  - There is no async mode with the http driver.
  - Refer to 'http-rest.md' for more information.

scenarios:
  default:
    schema: run driver=http tags==block:"schema.*" threads==1 cycles==UNDEF
    rampup: run driver=http tags==block:"rampup.*" cycles===TEMPLATE(rampup-cycles,3) threads=auto
    main: run driver=http tags==block:"main.*" cycles===TEMPLATE(main-cycles,10) threads=auto

bindings:
  weighted_hosts: WeightedStrings('TEMPLATE(stargate_host,stargate)')
  request_id: ToHashedUUID(); ToString();
  token: Discard(); Token('TEMPLATE(auth_token,)', 'TEMPLATE(auth_uri,http://localhost:8081/v1/auth)', 'TEMPLATE(auth_uid,cassandra)', 'TEMPLATE(auth_pswd,cassandra)');
  machine_id: Mod(TEMPLATE(sources,10000)); ToHashedUUID() -> java.util.UUID
  sensor_name: HashedLineToString('data/variable_words.txt');
  time: Mul(TEMPLATE(timespeed,100)L); Div(TEMPLATE(sources,10000)L); StringDateWrapper("yyyy-MM-dd'T'hh:mm:ss'Z");
  sensor_value: Normal(0.0,5.0); Add(100.0) -> double
  station_id: Div(TEMPLATE(sources,10000));Mod(TEMPLATE(stations,100)); ToHashedUUID() -> java.util.UUID
  data: HashedFileExtractToString('data/lorem_ipsum_full.txt',800,1200); URLEncode();

blocks:
  rampup:
    ops:
      rampup_insert:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/keyspaces/TEMPLATE(keyspace,baselines)/TEMPLATE(table,iot)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {
            "machine_id": "{machine_id}",
            "sensor_name": "{sensor_name}",
            "time": "{time}",
            "sensor_value": "{sensor_value}",
            "station_id": "{station_id}",
            "data": "{data}"
          }

  schema:
    ops:
      create_keyspace:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/schemas/keyspaces
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {
            "name": "TEMPLATE(keyspace,baselines)",
            "replicas": TEMPLATE(rf,1)
          }

      drop-table:
        method: DELETE
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/schemas/keyspaces/TEMPLATE(keyspace,baselines)/tables/TEMPLATE(table,iot)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-status: "[2-4][0-9][0-9]"

      create_table:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/schemas/keyspaces/TEMPLATE(keyspace,baselines)/tables
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {
            "name": "TEMPLATE(table,iot)",
            "columnDefinitions":
              [
                {
                  "name": "machine_id",
                  "typeDefinition": "uuid"
                },
                {
                  "name": "sensor_name",
                  "typeDefinition": "text"
                },
                {
                  "name": "time",
                  "typeDefinition": "timestamp"
                },
                {
                  "name": "sensor_value",
                  "typeDefinition": "double"
                },
                {
                  "name": "station_id",
                  "typeDefinition": "uuid"
                },
                {
                  "name": "data",
                  "typeDefinition": "text"
                }
              ],
            "primaryKey":
            {
              "partitionKey":
                [
                  "machine_id",
                  "sensor_name"
                ],
              "clusteringKey":
                [
                  "time"
                ]
            },
            "tableOptions":
            {
              "clusteringExpression":
                [
                  {
                    "column": "time",
                    "order": "DESC"
                  }
                ]
            },
            "ifNotExists": true
          }

  main_read:
    params:
      ratio: TEMPLATE(read_ratio,1)
    ops:
      main_select:
        method: GET
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/keyspaces/TEMPLATE(keyspace,baselines)/TEMPLATE(table,iot)?where=URLENCODE[[{"machine_id":{"$eq":"{machine_id}"},"sensor_name":{"$eq":"{sensor_name}"}}]]&page-size=TEMPLATE(limit,10)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"

  main_write:
    params:
      ratio: TEMPLATE(write_ratio,9)
    ops:
      main_write:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/keyspaces/TEMPLATE(keyspace,baselines)/TEMPLATE(table,iot)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {
            "machine_id": "{machine_id}",
            "sensor_name": "{sensor_name}",
            "time": "{time}",
            "sensor_value": "{sensor_value}",
            "station_id": "{station_id}",
            "data": "{data}"
          }
