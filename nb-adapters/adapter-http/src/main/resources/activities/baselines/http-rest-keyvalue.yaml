min_version: "5.17.3"

description: >2
  This workload emulates a key-value data model and access patterns.
  This should be identical to the cql variant except for:
  - There is no instrumentation with the http driver.
  - There is no async mode with the http driver.
  - Refer to 'http-rest.md' for more information.

scenarios:
  default:
    schema: run driver=http tags==block:schema threads==1 cycles==UNDEF
    rampup: run driver=http tags==block:"rampup.*" cycles===TEMPLATE(rampup-cycles,10) threads=auto
    main: run driver=http tags==block:"main.*" cycles===TEMPLATE(main-cycles,10) threads=auto

bindings:

  weighted_hosts: ToString(); WeightedStrings('TEMPLATE(stargate_host,stargate)'); ToString();
  request_id: ToHashedUUID(); ToString();
  token: Discard(); Token('TEMPLATE(auth_token,)','TEMPLATE(auth_uri,http://localhost:8081/v1/auth)', 'TEMPLATE(auth_uid,cassandra)', 'TEMPLATE(auth_pswd,cassandra)');

  seq_key: Mod(TEMPLATE(keycount,10000000)); ToString() -> String
  seq_value: Hash(); Mod(TEMPLATE(valuecount,1000000000)); ToString() -> String

  rw_key: TEMPLATE(keydist,Uniform(0,10000000)->int); ToString() -> String
  rw_value: Hash(); TEMPLATE(valdist,Uniform(0,1000000000)->int); ToString() -> String

blocks:
  schema:
    ops:
      create_keyspace:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/schemas/keyspaces
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {
            "name": "TEMPLATE(keyspace,baselines)",
            "replicas": TEMPLATE(rf,1)
          }
      drop-table:
        method: DELETE
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/schemas/keyspaces/TEMPLATE(keyspace,baselines)/tables/TEMPLATE(table,keyvalue)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-status: "[2-4][0-9][0-9]"

      create_table:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/schemas/keyspaces/TEMPLATE(keyspace,baselines)/tables
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {
            "name": "TEMPLATE(table,keyvalue)",
            "columnDefinitions": [
              {
                "name": "key",
                "typeDefinition": "text"
              },
              {
                "name": "value",
                "typeDefinition": "text"
              }
            ],
            "primaryKey": {
              "partitionKey": [
                "key"
              ]
            },
            "ifNotExists": true
          }

  schema_astra:
    ops:
      create_table_astra:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/schemas/keyspaces/TEMPLATE(keyspace,baselines)/tables
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {
            "name": "TEMPLATE(table,keyvalue)",
            "columnDefinitions": [
              {
                "name": "key",
                "typeDefinition": "text"
              },
              {
                "name": "value",
                "typeDefinition": "text"
              }
            ],
            "primaryKey": {
              "partitionKey": [
                "key"
              ]
            },
            "ifNotExists": true
          }
  rampup:
    ops:
      rampup_insert:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/keyspaces/TEMPLATE(keyspace,baselines)/TEMPLATE(table,keyvalue)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {
            "key": "{seq_key}",
            "value": "{seq_value}"
          }

  main_read:
    params:
      ratio: TEMPLATE(read_ratio,5)
    ops:
      main_select:
        method: GET
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/keyspaces/TEMPLATE(keyspace,baselines)/TEMPLATE(table,keyvalue)/{rw_key}
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        ok-status: "[2-4][0-9][0-9]"

  main_write:
    params:
      ratio: TEMPLATE(write_ratio,5)
    ops:
      main_write:
        method: POST
        uri: TEMPLATE(protocol,http)://{weighted_hosts}:TEMPLATE(restapi_port,8082)TEMPLATE(path_prefix,)/v2/keyspaces/TEMPLATE(keyspace,baselines)/TEMPLATE(table,keyvalue)
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "{token}"
        Content-Type: "application/json"
        body: >2
          {
            "key": "{rw_key}",
            "value": "{rw_value}"
          }
