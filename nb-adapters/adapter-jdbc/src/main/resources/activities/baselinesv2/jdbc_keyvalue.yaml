# jdbc_keyvalue.yaml default.drop dburl=jdbc:presto://hostaddr:8080/memory?user=testuser use_hikaricp=true
# jdbc_keyvalue.yaml default.schema dburl=jdbc:presto://hostaddr:8080/memory?user=testuser use_hikaricp=true
# jdbc_keyvalue.yaml default.rampup dburl=jdbc:presto://hostaddr:8080/memory?user=testuser use_hikaricp=true
# jdbc_keyvalue.yaml default.select dburl=jdbc:presto://hostaddr:8080/memory?user=testuser use_hikaricp=true

min_version: "5.17.2"

description: |
  A workload which reads ann-benchmarks vector data from HDF5 file format for PostgreSql with baselinetor.
  Template variable values:
  TEMPLATE(schemaname,public)
  TEMPLATE(tablename,baselines)
  TEMPLATE(rampupsize,1000)
  TEMPLATE(connections,10)
  TEMPLATE(select_cycles,1000)
  

scenarios:
  default:
    drop: >-
     run driver=jdbc tags==block:drop threads===1 cycles==UNDEF 
     url=TEMPLATE(dburl)
    schema: >-
      run driver=jdbc tags==block:schema threads===1 cycles==UNDEF 
      url=TEMPLATE(dburl)
    rampup: >-
      run driver=jdbc tags==block:rampup threads=10  
      cycles===TEMPLATE(rampupsize) url=TEMPLATE(dburl) num_conn=TEMPLATE(connections)
    select: >-
      run driver=jdbc tags==block:select threads=10  
      cycles===TEMPLATE(select_cycles) url=TEMPLATE(dburl) num_conn=TEMPLATE(connections)

bindings:
  rw_key: ToString();
  rw_value: HashRange(0L,10000L); ToString();

blocks:
  drop:
    ops:
      drop_table:
        ddl: |
          DROP TABLE IF EXISTS TEMPLATE(schemaname).TEMPLATE(tablename)
      ##
      # NOTE: Do NOT enable this block for 'runall.sh' script
      # --------------------------------------------------
      # drop_schema:
      #   ddl: |
      #     DROP SCHEMA IF EXISTS TEMPLATE(schemaname);

  schema:
    ops:
      create_schema:
        ddl: |
          CREATE SCHEMA IF NOT EXISTS TEMPLATE(schemaname)
      create_table:
        ddl: |-
          CREATE TABLE IF NOT EXISTS TEMPLATE(schemaname).TEMPLATE(tablename)
          (key varchar, value varchar)

  rampup:
    params:
      prepared: true
    ops:
      main_insert:
        dmlwrite: |
          INSERT INTO TEMPLATE(schemaname).TEMPLATE(tablename) VALUES (?,?)
        prep_stmt_val_arr: |
          {rw_key},{rw_value}

  select:
    params:
      prepared: true
    ops:
      select:
        dmlread: |
          SELECT * FROM TEMPLATE(schemaname).TEMPLATE(tablename) where key={rw_key}

#  main:
##    params:
##      prepared: true
#    ops:
#      # NOTE: right now this is only for cosine similarity.
#      #       in baselinetor, '<=>' is for cosine similarity
#      #                    '<->' is for euclidean distance
#      #                    '<#>' is for inner product
#      main_select:
#        dmlread: |
#          SELECT *
#          FROM TEMPLATE(schemaname).TEMPLATE(tablename)
#          ORDER BY value <=> ?
#          LIMIT TEMPLATE(top_k,100);
#        prep_stmt_val_arr: |
#          {test_floatlist}
#        #################################
#        ## NOTE:
#        #  1). The script blocks below are ONLY relevant with Vector relevancy score verification
#        #  2). The "verifier-key" must match the Vector data identifier column name (e.g. primary key name)
#        #      right now the identifier must be a type that can be converted to int.
#        verifier-key: "key"
#        verifier-init: |
#          relevancy=scriptingmetrics.newRelevancyMeasures(_parsed_op);
#          k=TEMPLATE(top_k,100)
#          relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.recall("recall",k));
#          relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.precision("precision",k));
#          relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.F1("F1",k));
#          relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.reciprocal_rank("RR",k));
#          relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.average_precision("AP",k));
#        verifier: |
#          // driver-specific function
#          actual_indices=pgvec_utils.getValueListForVerifierKey(result);
#          // driver-agnostic function
#          relevancy.accept({relevant_indices},actual_indices);
#          // because we are "verifying" although this needs to be reorganized
#          return true;
