min_version: "5.17.3"

description: |
  A workload with a float vector data type. The CQL Key-Value workload demonstrates the simplest possible schema with
  payload data where value is of the float vector data type. This is useful for measuring system capacity most directly
  in terms of raw operations.

  As a reference point, it provides some insight around types of workloads that are constrained around messaging,
  threading, and tasking, rather than bulk throughput.

  During preload, all keys are set with a value.

  During the main phase of the workload, random keys from the known population are replaced with new values which never repeat.

  During the main phase, random partitions are selected for upsert, with row values never repeating.
scenarios:
  default:
    schema: run driver=cql tags==block:schema threads==1 cycles==UNDEF
    rampup: run driver=cql tags==block:rampup cycles===TEMPLATE(rampup-cycles,10000000) threads=auto
    main_write: run driver=cql tags==block:main_write cycles===TEMPLATE(main-cycles,10000000) threads=auto
    main_read_ann: run driver=cql tags==block:main_read_ann cycles===TEMPLATE(main-cycles,10000000) threads=auto
    main_read_pk_ann: run driver=cql tags==block:main_read_pk_ann cycles===TEMPLATE(main-cycles,10000000) threads=auto
    main_read: run driver=cql tags==block:"main_read.*" cycles===TEMPLATE(main-cycles,10000000) threads=auto
    main: run driver=cql tags==block:"main.*" cycles===TEMPLATE(main-cycles,10000000) threads=auto
  astra:
    schema: run driver=cql tags==block:schema_astra threads==1 cycles==UNDEF
  drop_tables: run driver=cql tags==block:drop_tables threads==1 cycles==UNDEF
  truncate: run driver=cql tags==block:truncate_tables cycles===1 threads=1
  reads: run driver=cql tags==block:"main_read.*" cycles===TEMPLATE(main-cycles,10000000) threads=auto

bindings:
  seq_key: Mod(TEMPLATE(keycount,1000000000)); ToString() -> String
  seq_value: Hash(); Mod(TEMPLATE(valuecount,1000000000)); ToString() -> String
  rw_key: TEMPLATE(keydist,Uniform(0,1000000000)->int); ToString() -> String
  rw_value: Hash(); TEMPLATE(valdist,Uniform(0,1000000000)->int); ToString() -> String
  vector_value: CqlVector(ListSizedHashed(TEMPLATE(dimensions,5),HashRange(0.0f,100.0f))); NormalizeCqlVector();

blocks:
  drop_tables:
    ops:
      drop_tables_vectors:
        raw: |
          DROP TABLE IF EXISTS TEMPLATE(keyspace,baselines).TEMPLATE(table,vectors);

  schema_astra:
    params:
      prepared: false
    ops:
      create_table:
        raw: |
          CREATE TABLE IF NOT EXISTS TEMPLATE(keyspace,baselines).TEMPLATE(table,vectors) (
            key TEXT,
            value vector<float,TEMPLATE(dimensions,5)>,
            PRIMARY KEY (key)
          );
      create_sai_index:
        raw: |
          CREATE CUSTOM INDEX IF NOT EXISTS ON TEMPLATE(keyspace,baselines).TEMPLATE(table,vectors) (value) USING 'StorageAttachedIndex';

  schema:
    params:
      prepared: false
    ops:
      create_keyspace:
        raw: |
          CREATE KEYSPACE IF NOT EXISTS TEMPLATE(keyspace,baselines)
          WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 'TEMPLATE(rf,1)'};
      create_table:
        raw: |
          CREATE TABLE IF NOT EXISTS TEMPLATE(keyspace,baselines).TEMPLATE(table,vectors) (
            key TEXT,
            value vector<float,TEMPLATE(dimensions,5)>,
            PRIMARY KEY (key)
          );
      create_sai_index:
        raw: |
          CREATE CUSTOM INDEX IF NOT EXISTS ON TEMPLATE(keyspace,baselines).TEMPLATE(table,vectors) (value) USING 'StorageAttachedIndex';

  truncate_tables:
    params:
      prepared: false
    ops:
      truncate_vectors:
        raw: |
          TRUNCATE TABLE TEMPLATE(keyspace,baselines).TEMPLATE(table,vectors);

  rampup:
    params:
      cl: TEMPLATE(write_cl,LOCAL_QUORUM)
    ops:
      rampup_insert:
        prepared: |
          INSERT INTO TEMPLATE(keyspace,baselines).TEMPLATE(table,vectors)
          (key, value) VALUES ({seq_key},{vector_value});

  main_read_ann:
    params:
      ratio: TEMPLATE(read_ratio,90)
      cl: TEMPLATE(read_cl,LOCAL_QUORUM)
      instrument: true
    ops:
      main_select_ann_limit:
        prepared: |
          SELECT * FROM TEMPLATE(keyspace,baselines).TEMPLATE(table,vectors) ORDER BY value ANN OF {vector_value} LIMIT TEMPLATE(select_limit,2);

  main_read_pk_ann:
    params:
      ratio: TEMPLATE(read_ratio,90)
      cl: TEMPLATE(read_cl,LOCAL_QUORUM)
      instrument: true
    ops:
      main_select_pk_ann_limit:
        prepared: |
          SELECT * FROM TEMPLATE(keyspace,baselines).TEMPLATE(table,vectors) WHERE KEY={rw_key} ORDER BY value ANN OF {vector_value} LIMIT TEMPLATE(select_limit,2);

  main_write:
    params:
      ratio: TEMPLATE(write_ratio,10)
      cl: TEMPLATE(write_cl,LOCAL_QUORUM)
      instrument: true
    ops:
      main_insert:
        prepared: |
          INSERT INTO TEMPLATE(keyspace,baselines).TEMPLATE(table,vectors)
          (key, value) VALUES ({rw_key}, {vector_value});
