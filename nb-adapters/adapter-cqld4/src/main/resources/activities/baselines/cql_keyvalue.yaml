description: |
  A workload with only text keys and text values.
  This workload is rather simple but it is useful for demonstration purposes.
  If you want a more thorough example, you might be interested in the
  baselinesv2/cql-* workloads.
  defaults:
   TEMPLATE(keyspace,baselines)
   TEMPLATE(table,keyvalue)


scenarios:
  default:
    schema: run driver=cql tags==block:schema threads==1 cycles==UNDEF
    rampup: run driver=cql tags==block:rampup cycles===TEMPLATE(rampup-cycles,10000000) threads=auto
    main: run driver=cql tags=='block:main-.*' cycles===TEMPLATE(main-cycles,10000000) threads=auto
  astra:
    schema: run driver=cql tags==block:schema_astra threads==1 cycles==UNDEF
    rampup: run driver=cql tags==block:rampup cycles===TEMPLATE(rampup-cycles,10000000) threads=auto
    main: run driver=cql tags=='block:main-.*' cycles===TEMPLATE(main-cycles,10000000) threads=auto
  basic_check:
    schema: run driver=cql tags==block:schema threads==1 cycles==UNDEF
    rampup: run driver=cql tags==block:rampup cycles===TEMPLATE(rampup-cycles,10) threads=auto
    main: run driver=cql tags=='block:main-.*' cycles===TEMPLATE(main-cycles,10) threads=auto

bindings:
  seq_key: Mod(TEMPLATE(keycount,1000000000)); ToString() -> String
  seq_value: Hash(); Mod(TEMPLATE(valuecount,1000000000)); ToString() -> String
  rw_key: TEMPLATE(keydist,Uniform(0,1000000000)->int); ToString() -> String
  rw_value: Hash(); TEMPLATE(valdist,Uniform(0,1000000000)->int); ToString() -> String

blocks:
  schema:
    ops:
      create_keyspace:
        raw: |
          create keyspace if not exists TEMPLATE(keyspace,baselines)
          WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 'TEMPLATE(rf,1)'}
          AND durable_writes = true;
      create_table:
        raw: |
          create table if not exists TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue) (
          key text,
           value text,
           PRIMARY KEY (key)
          );
  schema_astra:
    ops:
     create_table:
      raw: |
        create table if not exists TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue) (
        key text,
         value text,
         PRIMARY KEY (key)
        );
  rampup:
    params:
      cl: TEMPLATE(write_cl,LOCAL_QUORUM)
    ops:
      rampup_insert:
        prepared: |
          insert into TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue)
          (key, value)
          values ({seq_key},{seq_value});
#  verify:
#    params:
#      cl: TEMPLATE(read_cl,LOCAL_QUORUM)
#    ops:
#      verify_select:
#        prepared: |
#          select * from TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue) where key={seq_key};
#        verify-fields: key->seq_key, value->seq_value
  main_read:
    params:
      ratio: 5
      cl: TEMPLATE(read_cl,LOCAL_QUORUM)
    ops:
      main_select:
        prepared: |
          select * from TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue) where key={rw_key};
  main_write:
    params:
      ratio: 5
      cl: TEMPLATE(write_cl,LOCAL_QUORUM)
    ops:
      main_insert:
        prepared: |
          insert into TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue)
          (key, value) values ({rw_key}, {rw_value});
