min_version: "5.21.1"

params:
  driver: cqld4
  instrument: true

bindings:
  account_sid: ToString()
  knowledge_sid_w: HdfFileToInt("TEMPLATE(dataset)", "/train_ids");
  knowledge_sid_r: HdfFileToVarLengthIntArray("TEMPLATE(dataset)", "/test_ids"); IntArrayToString();
  content: CharBufImage('A-Za-z0-9_,:{}[]',1000000,WeightedLongs("12288:100")); ToString()
  id: ToHashedUUID()
  # write embedding
  embed_base: HdfFileToFloatList("TEMPLATE(dataset)", "/train"); ToCqlVector();
  # read embedding
  embed_query: HdfFileToFloatList("TEMPLATE(dataset)", "/test"); ToCqlVector();
  # KNN relevance score
  relevant_indices: HdfFileToIntArray("TEMPLATE(dataset)", "/neighbors");


blocks:
  reset_schema:
    ops:
      drop_tbl: |
        DROP TABLE IF EXISTS TEMPLATE(keyspace, default_keyspace).TEMPLATE(table, embeddings);

  schema:
    ops:
      op_tbl: |
        CREATE TABLE IF NOT EXISTS TEMPLATE(keyspace, default_keyspace).TEMPLATE(table, embeddings) (
          account_sid text,
          knowledge_sid int,
          content text,
          id uuid,
          embedding vector<float, TEMPLATE(dimension, 128)>,
          PRIMARY KEY (id)
        );
      op_idx_1: |
        CREATE CUSTOM INDEX IF NOT EXISTS TEMPLATE(table,embeddings)_embeddings_index
        ON TEMPLATE(keyspace,default_keyspace).TEMPLATE(table, embeddings)(embedding)
        USING 'org.apache.cassandra.index.sai.StorageAttachedIndex'
        WITH OPTIONS = {'source_model': 'TEMPLATE(source_model, openai_v3_large)'};
      op_idx_2: |
        CREATE CUSTOM INDEX IF NOT EXISTS TEMPLATE(table,embeddings)_ksid_index
        ON TEMPLATE(keyspace,default_keyspace).TEMPLATE(table, embeddings)(knowledge_sid)
        USING 'org.apache.cassandra.index.sai.StorageAttachedIndex';

  read_query_1:
    ops:
      op_r1_1:
        raw: |
          SELECT * FROM TEMPLATE(keyspace,default_keyspace).TEMPLATE(table, embeddings)
          WHERE knowledge_sid IN({knowledge_sid_r})
          ORDER BY embedding ANN OF {embed_query} LIMIT TEMPLATE(select_limit, 10);
        verifier-init: |
          topK=TEMPLATE(select_limit,10)
          relevancy=new io.nosqlbench.nb.api.engine.metrics.wrappers.RelevancyMeasures(_parsed_op)
          relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.recall("recall",topK));
          relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.precision("precision",topK));
          relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.F1("F1",topK));
          relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.reciprocal_rank("RR",topK));
          relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.average_precision("AP",topK));
          windowed_relevancy = new io.nosqlbench.nb.api.engine.metrics.wrappers.WindowedRelevancyMeasures(_parsed_op,10)
          windowed_relevancy.addFunction(io.nosqlbench.engine.extensions.computefunctions.RelevancyFunctions.recall("recall",topK));
        verifier: |
          actual_indices=cql_utils.cqlStringColumnToIntArray("account_sid",result);
          relevant_indices={relevant_indices};
          relevancy.accept(relevant_indices,actual_indices);
          windowed_relevancy.accept(relevant_indices, actual_indices);
          return true;


  main_write:
    params:
      cl: TEMPLATE(cl,LOCAL_QUORUM)
    ops:
      op_w_1: |
        INSERT INTO TEMPLATE(keyspace,default_keyspace).TEMPLATE(table, embeddings)
        (account_sid, knowledge_sid, content, id, embedding)
        VALUES ({account_sid}, {knowledge_sid_w}, {content}, {id}, {embed_base});
