description: |
  This is a set of example for how to create or use ByteBuffers in various ways.

scenarios:
  default: run driver=stdout format=readout

bindings:

  # To see the cycle correspondence with
  cycle: Identity()

  # ToHexString() is added to many of these so that you can see the data
  # in the byte buffers. To send a byte buffer object to a driver,
  # be sure to remove the ToHexString() functions.

  # fill a byte buffer of the given size with hashed longs
  # Hashing is incremental, not recursive, thus data looks
  # like a sliding window over values
  hashed_bb: ByteBufferSizedHashed(30); ToHexString();

  # control the size of the extracted sample with a hash range
  hashed_bb_sizerange: ByteBufferSizedHashed(HashRange(1,10)); ToHexString();

  # control the size of the extracted sample based on a discrete function
  hashed_bb_size_binomial: ByteBufferSizedHashed(Binomial(8,0.5)); ToHexString();

  # convert a ByteBuffer to a hex-encoded string with upper case
  bb_to_hex_uc: ByteBufferSizedHashed(20); ToHexString();

  # convert a ByteBuffer to a hex-encoded string with lower case
  bb_to_hex_lc: ByteBufferSizedHashed(20); ToHexString(false);

  # generate a byte buffer of 1000 bytes, and then compute a SHA-256
  # digest into another byte buffer
  digest_bb: ByteBufferSizedHashed(1000); DigestToByteBuffer('SHA-256'); ToHexString();

  # SHA-256 digest as above, but using a long as input, short-circuiting
  # the byte buffer construction spelled out above. This is easier
  # to use and faster to generate, although any digest will be
  # more intensive to calculate as test data, so only use digests
  # where you have specific testing requirements for them.
  digest_bb_direct: DigestToByteBuffer('SHA-256');


  # The example below show various type-specialized ByteBuffer
  # functions which are automatically selected depending on the
  # input type.

  # long byte buffer
  # same as long -> ToByteBuffer() -> ByteBuffer
  long_bb: ToByteBuffer(); ToHexString();

  # double byte buffer
  # same as long -> ToDouble() -> double; double -> ToByteBuffer() -> ByteBuffer
  double_bb: ToDouble(); ToByteBuffer(); ToHexString();

  # integer byte buffer
  # same as long -> ToInt() -> int; int -> ToByteBuffer() -> ByteBuffer
  int_bb: ToInt(); ToByteBuffer(); ToHexString();

  # string to ByteBuffer
  # same as long -> NumberNameToString() -> String; String -> ToByteBuffer()
  string_bb: NumberNameToString(); ToByteBuffer(); ToHexString();

  # char buffer to byte buffer, another way to get the same samples as above
  # same as
  # long -> NumberNameToString() -> String; String -> ToCharBuffer() -> CharBuffer; CharBuffer -> ToByteBuffer() -> ByteBuffer
  cb_bb: NumberNameToString(); ToCharBuffer(); ToByteBuffer(); ToHexString();
