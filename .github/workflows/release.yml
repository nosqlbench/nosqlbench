name: release

# This workflow should run for any push which is a release build.
# Release builds are indicated with a tag that ends in -release
# In order to effect this, you can do the following:
#  scripts/tag-release-build
# If you want to replace a build, you can use -f and then
# push the update to the tag like push -f origin <tag>,
# although this should never be done!

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+-release"

jobs:
  release-build:
    runs-on: ubuntu-20.04
    steps:

      - name: checkout repo
        uses: actions/checkout@v4

      - name: setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '21'
          java-package: jdk
          architecture: x64

      - name: set git username
        run: git config --global user.email "${{ secrets.NBDROID_EMAIL }}"

      - name: set git email
        run: git config --global user.name "${{ secrets.NBDROID_NAME }}"

      - name: free disk space
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: read versions
        run: |
          set -x
          RELEASE_VERSION=$(scripts/get-release-version.sh)
          RELEASE_VERSION_NUMERIC=$(scripts/get-release-version.sh -n)
          RELEASE_VERSION_SHORT=$(scripts/get-release-version.sh -s)
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_VERSION_NUMERIC=${RELEASE_VERSION_NUMERIC}" >> $GITHUB_ENV
          echo "DOCKER_TAGS=nosqlbench/nosqlbench:${RELEASE_VERSION_NUMERIC},nosqlbench/nosqlbench:${RELEASE_VERSION_SHORT}-latest" >> $GITHUB_ENV

      - name: build release revision
        run: |
          mvn clean package -Drevision="${{ env.RELEASE_VERSION }}" -P enable-container-tests

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3

      - name: docker hub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: docker test build
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          file: Dockerfile
          pull: true
          push: false
          load: true
          tags: ${{ env.DOCKER_TAGS }}

      - name: sanity check docker image
        run: |
          docker run --rm nosqlbench/nosqlbench:${{ env.RELEASE_VERSION_NUMERIC }} --version

      - name: bundle artifacts
        run: |
          pwd
          ls -l
          mkdir staging
          cp nb5/target/nb5.jar nb5/target/nb5 staging

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: staging

      #      - name: generate javadoc
      #        run: mvn javadoc:aggregate-jar
      #        continue-on-error: false
      #
      #      - name: upload javadoc
      #        uses: actions/upload-artifact@v4
      #        with:
      #          name: javadoc
      #          path: target/nosqlbench-*-javadoc.jar

      - name: bump minor version
        run: |
          scripts/bump-minor-version

      - name: docker push to hub
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: Dockerfile
          pull: true
          push: true
          tags: ${{ env.DOCKER_TAGS }}

      #  https://github.com/softprops/action-gh-release
      - name: create github release
        uses: softprops/action-gh-release@v2.0.4
        if: startsWith(github.ref, 'refs/tags/')
        with:
          #          body: ${{ steps.prepare_summary.outputs.release_summary }}
          #          body_path: PREVIEW_NOTES.md
          draft: false
          prerelease: true
          generate_release_notes: true
          name: Release ${{ env.RELEASE_VERSION }}
          fail_on_unmatched_files: true
          tag_name: ${{ env.RELEASE_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            nb5/target/nb5
            nb5/target/nb5.jar

      #      - name: create github release
      #        id: create_github_release
      #        uses: actions/create-release@v1
      #        env:
      #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #        with:
      #          tag_name: ${{ env.RELEASE_VERSION }}
      #          release_name: Release ${{ env.RELEASE_VERSION }}
      #          draft: false
      #          prerelease: true
      #          body: ${{ steps.prepare_summary.outputs.release_summary }}
      #
      #      - name: upload nb.jar to github release
      #        id: upload-nb-jar
      #        uses: actions/upload-release-asset@v1
      #        env:
      #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #        with:
      #          upload_url: ${{ steps.create_github_release.outputs.upload_url }}
      #          asset_path: nb5/target/nb5.jar
      #          asset_name: nb5.jar
      #          asset_content_type: application/octet-stream
      #
      #      - name: upload nb binary to github release
      #        id: upload-nb-binary
      #        uses: actions/upload-release-asset@v1
      #        env:
      #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #        with:
      #          upload_url: ${{ steps.create_github_release.outputs.upload_url }}
      #          asset_path: nb5/target/nb5
      #          asset_name: nb5
      #          asset_content_type: application/octet-stream

      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            [a-zA-Z]**/logs/*

#  javadocs:
#    needs: release
#    runs-on: ubuntu-20.04
#    steps:
#      - name: set git username
#        run: git config --global user.email "${{ secrets.NBDROID_EMAIL }}"
#      - name: set git email
#        run: git config --global user.name "${{ secrets.NBDROID_NAME }}"
#      - name: download javadocs
#        uses: actions/download-artifact@v4
#        with:
#          name: javadoc
#      - run: ls -la
#      - name: unpackage javadoc
#        run: unzip nosqlbench-*-javadoc.jar
#      - run: ls -la
#      - name: Push javadocs
#        uses: ad-m/github-push-action@master
#        with:
#          repository: nosqlbench/nosqlbench-javadoc
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          branch: main
#
#
#  docs:
#    needs: release
#    runs-on: ubuntu-20.04
#    steps:
#
#      - name: set git username
#        run: git config --global user.email "${{ secrets.NBDROID_EMAIL }}"
#
#      - name: set git email
#        run: git config --global user.name "${{ secrets.NBDROID_NAME }}"
#
#      - name: download guidebook
#        uses: actions/download-artifact@v1
#        with:
#          name: guidebook
#          path: guidebook
#
#      - run: ls -la
#
#      - name: clone nosqlbench-docs
#        env:
#          NBDROID_NAME: ${{ secrets.NBDROID_NAME }}
#          NBDROID_TOKEN: ${{ secrets.NBDROID_TOKEN }}
#        run: |
#          git clone https://${{secrets.NBDROID_NAME}}:${{secrets.NBDROID_TOKEN}}@github.com/nosqlbench/nosqlbench-docs.git nosqlbench-docs
#          cd nosqlbench-docs
#          echo "files listing"
#          find .
#          git remote set-url origin https://${{secrets.NBDROID_NAME}}:${{secrets.NBDROID_TOKEN}}@github.com/nosqlbench/nosqlbench-docs.git
#          git remote -v
#
#      Disabling this because it will be replaced soon.
#      - name: push changes
#        env:
#          NBDROID_NAME: ${{ secrets.NBDROID_NAME }}
#          NBDROID_TOKEN: ${{ secrets.NBDROID_TOKEN }}
#        run: |
#          rsync -av --delete guidebook/guidebook/ nosqlbench-docs/docs/
#          echo "docs.nosqlbench.io" > nosqlbench-docs/docs/CNAME
#          cd nosqlbench-docs
#          git add docs
#          git add -u
#          CHANGES=$(git status --porcelain 2>/dev/null| wc -l)
#          echo "found $CHANGES to push for doc updates"
#          if (( $CHANGES > 0 ))
#          then
#            git commit -m"docs update for $GITHUB_REF"
#            git push
#          fi



