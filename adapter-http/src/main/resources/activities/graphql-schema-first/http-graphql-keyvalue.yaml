min_version: "5.17.1"

# TODO
# - do we need a truncate schema / namespace at the end

description: |
  This workload emulates a key-value data model and access patterns.
  This should be identical to the cql variant except for:
  - Schema creation GraphQL first, we don't use cql and thus can only create schema with limited options.
  - There is no instrumentation with the http driver.
  - There is no async mode with the http driver.
  Note that graphql_port should reflect the port where GraphQL API V2 is exposed (defaults to 8080).

scenarios:
  default:
    schema: run driver=http tags==block:"schema.*" threads==1 cycles==UNDEF
    rampup: run driver=http tags==block:rampup cycles===TEMPLATE(rampup-cycles,10) threads=auto
    main: run driver=http tags==block:"main.*" cycles===TEMPLATE(main-cycles,10) threads=auto

bindings:
  # To enable an optional weighted set of hosts in place of a load balancer
  # Examples
  #   single host: graphql_host=host1
  #   multiple hosts: graphql_host=host1,host2,host3
  #   multiple weighted hosts: graphql_host=host1:3,host2:7
  weighted_hosts: WeightedStrings('<<graphql_host:stargate>>')
  # http request id

  request_id: ToHashedUUID(); ToString();
  auto_gen_token: Discard(); StargateToken('http://localhost:8081/v1/auth'); ToString();

  seq_key: Mod(<<keycount:10000000>>); ToString() -> String
  seq_value: Hash(); Mod(<<valuecount:1000000000>>); ToString() -> String

  rw_key: <<keydist:Uniform(0,10)->int>>; ToString() -> String
  rw_value: Hash(); <<valdist:Uniform(0,1000000000)->int>>; ToString() -> String

blocks:
  schema:
    ops:
      create-keyspace:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<graphql_port:8080>><<path_prefix:>>/graphql-schema
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:{auto_gen_token}>>"
        Content-Type: "application/json"
        body: >2
          {
            "query":"mutation {\n  createKeyspace(name: \"<<keyspace:gqlsf_keyvalue>>\", replicas: <<rf:1>>, ifNotExists: true) \n}\n"
          }

      create-gql-schema:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<graphql_port:8080>><<path_prefix:>>/graphql-admin
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:{auto_gen_token}>>"
        Content-Type: "application/json"
        body: >2
          {
            "query":"mutation {\n  deploySchema(keyspace: \"<<keyspace:gqlsf_keyvalue>>\", schema: \"\"\"\n      type KeyValue @cql_input {\n        key: String! @cql_column(partitionKey: true)\n        value: String!\n      }\n      type Query {\n        getKeyValue(\n          key: String!,\n        ): KeyValue\n      }\n      type Mutation {\n    \t\tinsertKeyValue(keyValue: KeyValueInput): KeyValue\n    }\n  \"\"\") {\n    version\n  }\n}\n"
          }

  rampup:
    ops:
      rampup-insert:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<graphql_port:8080>><<path_prefix:>>/graphql/<<keyspace:gqlsf_keyvalue>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:{auto_gen_token}>>"
        Content-Type: "application/json"
        body: >2
          {
            "query":"mutation {\n  insertKeyValue(keyValue: {key: \"{seq_key}\", value: \"{seq_value}\"}) {\n    key\n    value\n  }\n}\n"
          }

  main-read:
    params:
      ratio: <<read_ratio:1>>
    ops:
      main-select:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<graphql_port:8080>><<path_prefix:>>/graphql/<<keyspace:gqlsf_keyvalue>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:{auto_gen_token}>>"
        Content-Type: "application/json"
        body: >2
          {
            "query":"{\n  getKeyValue(key: \"rw_key\") {\n    key\n    value\n  }\n}\n"
          }

  main-write:
    params:
      ratio: <<write_ratio:9>>
    ops:
      main-write:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<graphql_port:8080>><<path_prefix:>>/graphql/<<keyspace:gqlsf_keyvalue>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:{auto_gen_token}>>"
        Content-Type: "application/json"
        body: >2
          {
            "query":"mutation {\n  insertKeyValue(keyValue: {key: \"{rw_key}\", value: \"{rw_value}\"}) {\n    key\n    value\n  }\n}\n"
          }
