min_version: "5.17.1"

# TODO
# - do we need a truncate schema / namespace at the end
# - rest uses limit as it queries only by a single primary key, we can not map this to GQL (also should data be clustering key)

description: |
  This workload emulates a tabular workload with partitions, clusters, and data fields.
  This should be identical to the cql variant except for:
  - We need to URLEncode the `data` and `data_write` bindings because newlines can't be sent in REST calls.
  - Schema creation GraphQL first, we don't use cql and thus can only create schema with limited options.
  - There is no instrumentation with the http driver.
  - There is no async mode with the http driver.
  Note that graphql_port should reflect the port where GraphQL API V2 is exposed (defaults to 8080).

scenarios:
  default:
    schema: run driver=http tags==block:"schema.*" threads==1 cycles==UNDEF
    rampup: run driver=http tags==block:rampup cycles===TEMPLATE(rampup-cycles,10000000) threads=auto
    man: run driver=http tags==block:"main.*" cycles===TEMPLATE(main-cycles,10000000) threads=auto

bindings:
  # To enable an optional weighted set of hosts in place of a load balancer
  # Examples
  #   single host: graphql_host=host1
  #   multiple hosts: graphql_host=host1,host2,host3
  #   multiple weighted hosts: graphql_host=host1:3,host2:7
  weighted_hosts: WeightedStrings('<<graphql_host:stargate>>')
  # http request id
  request_id: ToHashedUUID(); ToString();
  # for ramp-up and verify
  part_layout: Div(<<partsize:1000000>>); ToString() -> String
  clust_layout: Mod(<<partsize:1000000>>); ToString() -> String
  data: HashedFileExtractToString('data/lorem_ipsum_full.txt',50,150); URLEncode();
  # for read
  limit: Uniform(1,10) -> int
  part_read: Uniform(0,<<partcount:100>>)->int; ToString() -> String
  clust_read: Add(1); Uniform(0,<<partsize:1000000>>)->int; ToString() -> String
  # for write
  part_write: Hash(); Uniform(0,<<partcount:100>>)->int; ToString() -> String
  clust_write: Hash(); Add(1); Uniform(0,<<partsize:1000000>>)->int; ToString() -> String
  data_write: Hash(); HashedFileExtractToString('data/lorem_ipsum_full.txt',50,150); URLEncode();

blocks:
  schema:
    ops:
      create-keyspace:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<graphql_port:8080>><<path_prefix:>>/graphql-schema
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        body: |
            {
              "query":"mutation {\n  createKeyspace(name: \"<<keyspace:gqlsf_tabular>>\", replicas: <<rf:1>>, ifNotExists: true) \n}\n"
            }

      create-gql-schema:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<graphql_port:8080>><<path_prefix:>>/graphql-admin
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        body: |
            {
              "query":"mutation {\n  deploySchema(keyspace: \"<<keyspace:gqlsf_tabular>>\", schema: \"\"\"\n      type Tabular @cql_input {\n        part: String! @cql_column(partitionKey: true)\n        clust: String! @cql_column(partitionKey: true)\n        data: String! \n      }\n      type SelectTabularResult @cql_payload {\n    \t\tdata: [Tabular]\n    \t\tpagingState: String\n    }\n      type Query {\n        getTabulars(\n          part: String!,\n          clust: String!,\n          pagingState: String @cql_pagingState\n        ): SelectTabularResult @cql_select(pageSize: 10)\n      }\n      type Mutation {\n    \t\tinsertTabular(tabular: TabularInput): Tabular\n    }\n  \"\"\") {\n    version\n  }\n}\n"
            }

  rampup:
    ops:
      rampup-insert:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<graphql_port:8080>><<path_prefix:>>/graphql/<<keyspace:gqlsf_tabular>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        body: |
            {
              "query":"mutation {\n  insertTabular(tabular: {part: \"{part_layout}\", clust: \"{clust_layout}\", data: \"{data}\"}) {\n    part\n    clust\n    data\n  }\n}\n"
            }

  main-read:
    params:
      ratio: <<read_ratio:1>>
    ops:
      main-select:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<graphql_port:8080>><<path_prefix:>>/graphql/<<keyspace:gqlsf_tabular>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        body: |
            {
              "query":"{\n  getTabulars(part: \"{part_read}\", clust: \"{clust_read}\") {\n    data {\n      part\n      clust\n      data\n    }\n    pagingState\n  }\n}\n"
            }

  main-write:
    params:
      ratio: <<write_ratio:9>>
    ops:
      main-write:
        method: POST
        uri: <<protocol:http>>://{weighted_hosts}:<<graphql_port:8080>><<path_prefix:>>/graphql/<<keyspace:gqlsf_tabular>>
        Accept: "application/json"
        X-Cassandra-Request-Id: "{request_id}"
        X-Cassandra-Token: "<<auth_token:my_auth_token>>"
        Content-Type: "application/json"
        body: |
            {
              "query":"mutation {\n  insertTabular(tabular: {part: \"{part_write}\", clust: \"{clust_write}\", data: \"{data_write}\"}) {\n    part\n    clust\n    data\n  }\n}\n"
            }
